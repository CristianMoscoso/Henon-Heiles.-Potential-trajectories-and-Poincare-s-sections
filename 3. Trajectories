# Henon-Heiles function
def Hennon(q, t):
    dxdt = q[2]
    dydt = q[3]
    dpxdt = -q[0] - 2 * eta * q[0] * q[1]
    dpydt = -q[1] - eta * q[0]**2 + eta * q[1]**2
    return [dxdt, dydt, dpxdt, dpydt]

# Graph for the solution
def grafica(ax, sol, E):
    ax.plot(sol[:, 0], sol[:, 1])
    ax.scatter(sol[0, 0], sol[0, 1], color="blue")
    ax.set_xlabel(r"$x$")
    ax.set_ylabel(r"$y$")
    energy_fraction = Fraction(E).limit_denominator()
    ax.set_title(f"E = {energy_fraction.numerator}/{energy_fraction.denominator}")

# Eta parameter
eta = 1

# Energy values
Energies = [1/12, 1/8, 1/6, 1/2]


fig, axes = plt.subplots(2, 2, figsize=(7, 6))

for i, E in enumerate(Energies):
    x0 = 0.
    y0 = 0.
    dydt0 = 0.

    try:
        dxdt0 = np.sqrt(2 * E - dydt0**2 + (x0**2 + y0**2) - 2 * eta * (x0**2 * y0 - y0**3 / 3))
    except ValueError as e:
        print(f"Error al calcular dxdt0 para E={E}: {e}")
        continue  

    # Initial conditions
    values_initial = [x0, y0, dxdt0, dydt0]

    # Integration time
    t_fin = 100
    N = 20 * t_fin
    tt = np.linspace(0, t_fin, N)

    sol = odeint(Hennon, values_initial, tt)

    # Graph
    row = i // 2
    col = i % 2
    grafica(axes[row, col], sol, E)

plt.tight_layout()
plt.show()
